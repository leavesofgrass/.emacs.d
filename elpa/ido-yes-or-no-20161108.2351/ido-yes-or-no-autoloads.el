;;; ido-yes-or-no-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))



;;; Generated autoloads from ido-yes-or-no.el

(defvar ido-yes-or-no-mode nil "\
Non-nil if Ido-Yes-Or-No mode is enabled.
See the `ido-yes-or-no-mode' command
for a description of this minor mode.")
(custom-autoload 'ido-yes-or-no-mode "ido-yes-or-no" nil)
(autoload 'ido-yes-or-no-mode "ido-yes-or-no" "\
Use ido for `yes-or-no-p'.

This is a global minor mode.  If called interactively, toggle the
`Ido-Yes-Or-No mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='ido-yes-or-no-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "ido-yes-or-no" '("ido-yes-or-no-p"))

;;; End of scraped data

(provide 'ido-yes-or-no-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; ido-yes-or-no-autoloads.el ends here
